{
    // possible values: en-US, zh-CN
    "locale": "en-US",

    // The startup command for this language server
    "command": [
        "${storage_path}/LSP-lua/bin/lua-language-server",
        "-E",
        "${storage_path}/LSP-lua/main.lua",
        "--locale=${locale}"
    ],

    // Initialization options sent to the subprocess during startup. You should
    // normally not touch this.
    "initializationOptions": {
        // We understand how to handle configuration changes from the server.
        "changeConfiguration": true
    },

    // The server version to download in $CACHE/Package Storage
    "server_version": "3.7.3",

    // Disable the trigger characters, because there's too many of them. The
    // default Lua syntax is capable enough to best decide when to trigger
    // the auto-complete widget.
    "disabled_capabilities": {
        "completionProvider": {
            "triggerCharacters": true
        }
    },

    // We start this server when opening a lua file
    "selector": "source.lua",

    // The server-specific settings
    "settings": {
        // Whether the addon manager is enabled or not.
        "Lua.addonManager.enable": true,
        // Enable code lens.
        "Lua.codeLens.enable": false,
        // When the input looks like a file name, automatically `require` this file.
        "Lua.completion.autoRequire": true,
        // Shows function call snippets.
        // possible values: "Disable", "Both", "Replace"
        "Lua.completion.callSnippet": "Disable",
        // Previewing the relevant code snippet of the suggestion may help you understand the usage
        // of the suggestion. The number set indicates the number of intercepted lines in the code
        // fragment. If it is set to `0`, this feature can be disabled.
        "Lua.completion.displayContext": 0,
        // Enable completion.
        "Lua.completion.enable": true,
        // Shows keyword syntax snippets.
        // possible values: "Disable", "Both", "Replace"
        "Lua.completion.keywordSnippet": "Replace",
        // The symbol used to trigger the postfix suggestion.
        "Lua.completion.postfix": "@",
        // The separator used when `require`.
        "Lua.completion.requireSeparator": ".",
        // Display parameters in completion list. When the function has multiple definitions, they
        // will be displayed separately.
        "Lua.completion.showParams": true,
        // Show contextual words in suggestions.
        // possible values: "Enable", "Fallback", "Disable"
        "Lua.completion.showWord": "Fallback",
        // Whether the displayed context word contains the content of other files in the workspace.
        "Lua.completion.workspaceWord": true,
        // Disabled diagnostic (Use code in hover brackets).
        "Lua.diagnostics.disable": [],
        // Do not diagnose Lua files that use the following scheme.
        "Lua.diagnostics.disableScheme": [
            "git"
        ],
        // Enable diagnostics.
        "Lua.diagnostics.enable": true,
        // Defined global variables.
        "Lua.diagnostics.globals": [],
        // Modify the diagnostic needed file status in a group.
        // * Opened:  only diagnose opened files
        // * Any:     diagnose all files
        // * None:    disable this diagnostic
        // `Fallback` means that diagnostics in this group are controlled by
        // `diagnostics.neededFileStatus` separately.
        // Other settings will override individual settings without end of `!`.
        "Lua.diagnostics.groupFileStatus": {},
        // Modify the diagnostic severity in a group.
        // `Fallback` means that diagnostics in this group are controlled by `diagnostics.severity`
        // separately.
        // Other settings will override individual settings without end of `!`.
        "Lua.diagnostics.groupSeverity": {},
        // How to diagnose ignored files.
        // possible values: "Enable", "Opened", "Disable"
        "Lua.diagnostics.ignoredFiles": "Opened",
        // How to diagnose files loaded via `Lua.workspace.library`.
        // possible values: "Enable", "Opened", "Disable"
        "Lua.diagnostics.libraryFiles": "Opened",
        // * Opened:  only diagnose opened files
        // * Any:     diagnose all files
        // * None:    disable this diagnostic
        // End with `!` means override the group setting `diagnostics.groupFileStatus`.
        "Lua.diagnostics.neededFileStatus": {},
        // Modify the diagnostic severity.
        // End with `!` means override the group setting `diagnostics.groupSeverity`.
        "Lua.diagnostics.severity": {},
        // Do not diagnose `unused-local` when the variable name matches the following pattern.
        "Lua.diagnostics.unusedLocalExclude": [],
        // Latency (milliseconds) for workspace diagnostics.
        "Lua.diagnostics.workspaceDelay": 3000,
        // Set the time to trigger workspace diagnostics.
        // possible values: "OnChange", "OnSave", "None"
        "Lua.diagnostics.workspaceEvent": "OnSave",
        // Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also
        // reduces the speed of workspace diagnostics. The diagnosis of the file you are currently
        // editing is always done at full speed and is not affected by this setting.
        "Lua.diagnostics.workspaceRate": 100,
        // Treat specific field names as package, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are
        // package, witch can only be accessed in the file where the definition is located.
        "Lua.doc.packageName": [],
        // Treat specific field names as private, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are
        // private, witch can only be accessed in the class where the definition is located.
        "Lua.doc.privateName": [],
        // Treat specific field names as protected, e.g. `m_*` means `XXX.m_id` and `XXX.m_type` are
        // protected, witch can only be accessed in the class where the definition is located and
        // its subclasses.
        "Lua.doc.protectedName": [],
        // The default format configuration. Has a lower priority than `.editorconfig` file in the
        // workspace.
        // Read [formatter docs](https://github.com/CppCXY/EmmyLuaCodeStyle/tree/master/docs) to
        // learn usage.
        "Lua.format.defaultConfig": {},
        // Enable code formatter.
        "Lua.format.enable": true,
        // Show hints of array index when constructing a table.
        // possible values: "Enable", "Auto", "Disable"
        "Lua.hint.arrayIndex": "Auto",
        // If the called function is marked `---@async`, prompt `await` at the call.
        "Lua.hint.await": true,
        // Enable inlay hint.
        "Lua.hint.enable": false,
        // Show hints of parameter name at the function call.
        // possible values: "All", "Literal", "Disable"
        "Lua.hint.paramName": "All",
        // Show type hints at the parameter of the function.
        "Lua.hint.paramType": true,
        // If there is no semicolon at the end of the statement, display a virtual semicolon.
        // possible values: "All", "SameLine", "Disable"
        "Lua.hint.semicolon": "SameLine",
        // Show hints of type at assignment operation.
        "Lua.hint.setType": false,
        // Enable hover.
        "Lua.hover.enable": true,
        // When the value corresponds to multiple types, limit the number of types displaying.
        "Lua.hover.enumsLimit": 5,
        // Whether to expand the alias. For example, expands `---@alias myType boolean|number`
        // appears as `boolean|number`, otherwise it appears as `myType'.
        "Lua.hover.expandAlias": true,
        // When hovering to view a table, limits the maximum number of previews for fields.
        "Lua.hover.previewFields": 50,
        // Hover to view numeric content (only if literal is not decimal).
        "Lua.hover.viewNumber": true,
        // Hover to view the contents of a string (only if the literal contains an escape
        // character).
        "Lua.hover.viewString": true,
        // The maximum length of a hover to view the contents of a string.
        "Lua.hover.viewStringMax": 1000,
        // Specify the executable path in VSCode.
        "Lua.misc.executablePath": "",
        // [Command line parameters](https://github.com/LuaLS/lua-telemetry-server/tree/master/method)
        // when starting the language server in VSCode.
        "Lua.misc.parameters": [],
        // Set name style config
        "Lua.nameStyle.config": {},
        // Adjust the enabled state of the built-in library. You can disable (or redefine) the non-
        // existent library according to the actual runtime environment.
        // * `default`: Indicates that the library will be enabled or disabled according to the
        // runtime version
        // * `enable`: always enable
        // * `disable`: always disable
        "Lua.runtime.builtin": {},
        // File encoding. The `ansi` option is only available under the `Windows` platform.
        // possible values: "utf8", "ansi", "utf16le", "utf16be"
        "Lua.runtime.fileEncoding": "utf8",
        // Format of the directory name of the meta files.
        "Lua.runtime.meta": "${version} ${language} ${encoding}",
        // Supports non-standard symbols. Make sure that your runtime environment supports these
        // symbols.
        "Lua.runtime.nonstandardSymbol": [],
        // When using `require`, how to find the file based on the input name.
        // Setting this config to `?/init.lua` means that when you enter `require 'myfile'`,
        // `${workspace}/myfile/init.lua` will be searched from the loaded files.
        // if `runtime.pathStrict` is `false`, `${workspace}/**/myfile/init.lua` will also be
        // searched.
        // If you want to load files outside the workspace, you need to set `Lua.workspace.library`
        // first.
        "Lua.runtime.path": [
            "?.lua", 
            "?/init.lua"
        ],
        // When enabled, `runtime.path` will only search the first level of directories, see the
        // description of `runtime.path`.
        "Lua.runtime.pathStrict": false,
        // Plugin path. Please read [wiki](https://github.com/LuaLS/lua-language-server/wiki/Plugins) to learn more.
        "Lua.runtime.plugin": "",
        // Additional arguments for the plugin.
        "Lua.runtime.pluginArgs": [],
        // The custom global variables are regarded as some special built-in variables, and the
        // language server will provide special support
        // The following example shows that 'include' is treated as' require '.
        // ```json
        // "Lua.runtime.special" : {
        //     "include" : "require"
        // }
        // ```
        "Lua.runtime.special": {},
        // Allows Unicode characters in name.
        "Lua.runtime.unicodeName": false,
        // Lua runtime version.
        // possible values: "Lua 5.1", "Lua 5.2", "Lua 5.3", "Lua 5.4", "LuaJIT"
        "Lua.runtime.version": "Lua 5.4",
        // Semantic coloring of type annotations.
        "Lua.semantic.annotation": true,
        // Enable semantic color. You may need to set `editor.semanticHighlighting.enabled` to
        // `true` to take effect.
        "Lua.semantic.enable": true,
        // Semantic coloring of keywords/literals/operators. You only need to enable this feature if
        // your editor cannot do syntax coloring.
        "Lua.semantic.keyword": false,
        // Semantic coloring of variables/fields/parameters.
        "Lua.semantic.variable": true,
        // Enable signature help.
        "Lua.signatureHelp.enable": true,
        // Custom words for spell checking.
        "Lua.spell.dict": [],
        // Allowed to assign the `number` type to the `integer` type.
        "Lua.type.castNumberToInteger": true,
        // When checking the type of union type, ignore the `nil` in it.
        // When this setting is `false`, the `number|nil` type cannot be assigned to the `number`
        // type. It can be with `true`.
        "Lua.type.weakNilCheck": false,
        // Once one subtype of a union type meets the condition, the union type also meets the
        // condition.
        // When this setting is `false`, the `number|boolean` type cannot be assigned to the
        // `number` type. It can be with `true`.
        "Lua.type.weakUnionCheck": false,
        // Configures the formatting behavior while typing Lua code.
        "Lua.typeFormat.config": {},
        // Show progress bar in status bar.
        "Lua.window.progressBar": true,
        // Show extension status in status bar.
        "Lua.window.statusBar": true,
        // Automatic detection and adaptation of third-party libraries, currently supported
        // libraries are:
        // * OpenResty
        // * Cocos4.0
        // * LÖVE
        // * LÖVR
        // * skynet
        // * Jass
        // possible values: false, true, "Ask", "Apply", "ApplyInMemory", "Disable"
        "Lua.workspace.checkThirdParty": "Ask",
        // Ignored files and directories (Use `.gitignore` grammar).
        "Lua.workspace.ignoreDir": [
            ".vscode"
        ],
        // Ignore submodules.
        "Lua.workspace.ignoreSubmodules": true,
        // In addition to the current workspace, which directories will load files from. The files
        // in these directories will be treated as externally provided code libraries, and some
        // features (such as renaming fields) will not modify these files.
        "Lua.workspace.library": [],
        // Max preloaded files.
        "Lua.workspace.maxPreload": 5000,
        // Skip files larger than this value (KB) when preloading.
        "Lua.workspace.preloadFileSize": 500,
        // Ignore files list in `.gitignore` .
        "Lua.workspace.useGitIgnore": true,
        // Add private third-party library configuration file paths here, please refer to the built-
        // in [configuration file path](https://github.com/LuaLS/lua-language-
        // server/tree/master/meta/3rd)
        "Lua.workspace.userThirdParty": [],
    }
}
