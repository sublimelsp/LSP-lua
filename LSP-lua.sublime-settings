{
    // possible values: en-US, zh-CN
    "locale": "en-US",

    // The startup command for this language server
    "command": [
        "${storage_path}/LSP-lua/bin/${binplatform}/lua-language-server",
        "-E",
        "-e",
        "LANG=\"${locale}\"",
        "${storage_path}/LSP-lua/main.lua"
    ],

    // Initialization options sent to the subprocess during startup. You should
    // normally not touch this.
    "initializationOptions": {
        // We understand how to handle configuration changes from the server.
        "changeConfiguration": true
    },

    // The server version to download in $CACHE/Package Storage
    "server_version": "2.4.7",

    // Disable the trigger characters, because there's too many of them. The
    // default Lua syntax is capable enough to best decide when to trigger
    // the auto-complete widget.
    "disabled_capabilities": {
        "completionProvider": {
            "triggerCharacters": true
        }
    },

    // We start this server when opening a lua file
    "selector": "source.lua",

    // The server-specific settings
    "settings": {
        // Color mode.
        // possible values: Grammar, Semantic, SemanticEnhanced
        "Lua.color.mode": "Grammar",
        // When the input looks like a file name, automatically `require` this file.
        "Lua.completion.autoRequire": true,
        // Shows function call snippets.
        // possible values: Disable, Both, Replace
        "Lua.completion.callSnippet": "Disable",
        // Previewing the relevant code snippet of the suggestion may help you understand the usage
        // of the suggestion. The number set indicates the number of intercepted lines in the code
        // fragment. If it is set to `0`, this feature can be disabled.
        "Lua.completion.displayContext": 6,
        // Enable completion.
        "Lua.completion.enable": true,
        // Shows keyword syntax snippets.
        // possible values: Disable, Both, Replace
        "Lua.completion.keywordSnippet": "Replace",
        // Display parameters in completion list. When the function has multiple definitions, they
        // will be displayed separately.
        "Lua.completion.showParams": true,
        // Shows words within the workspace.
        "Lua.completion.workspaceWord": true,
        // Disabled diagnostic (Use code in hover brackets).
        "Lua.diagnostics.disable": [],
        // Enable diagnostics.
        "Lua.diagnostics.enable": true,
        // Defined global variables.
        "Lua.diagnostics.globals": [],
        // If you want to check only opened files, choice Opened; else choice Any.
        "Lua.diagnostics.neededFileStatus": {},
        // Modified diagnostic severity.
        "Lua.diagnostics.severity": {},
        // Latency (milliseconds) for workspace diagnostics. When you start the workspace, or edit
        // any file, the entire workspace will be re-diagnosed in the background. Set to negative to
        // disable workspace diagnostics.
        "Lua.diagnostics.workspaceDelay": 0,
        // Workspace diagnostics run rate (%). Decreasing this value reduces CPU usage, but also
        // reduces the speed of workspace diagnostics. The diagnosis of the file you are currently
        // editing is always done at full speed and is not affected by this setting.
        "Lua.diagnostics.workspaceRate": 100,
        // Enabel hint.
        "Lua.hint.enable": false,
        // Hint parameter name when the parameter called is literal.
        "Lua.hint.paramName": true,
        // Show type hints at the parameter of the function.
        "Lua.hint.paramType": true,
        // Hint type at assignment operation.
        "Lua.hint.setType": false,
        // Enable hover.
        "Lua.hover.enable": true,
        // When the value corresponds to multiple types, limit the number of types displaying.
        "Lua.hover.enumsLimit": 5,
        // When hovering to view a table, limits the maximum number of previews for fields.
        "Lua.hover.previewFields": 20,
        // Hover to view numeric content (only if literal is not decimal).
        "Lua.hover.viewNumber": true,
        // Hover to view the contents of a string (only if the literal contains an escape
        // character).
        "Lua.hover.viewString": true,
        // The maximum length of a hover to view the contents of a string.
        "Lua.hover.viewStringMax": 1000,
        // Adjust the enabled state of the built-in library. You can disable (or redefine) the non-
        // existent library according to the actual runtime environment.
        // * `default`: Indicates that the library will be enabled or disabled according to the
        // runtime version
        // * `enable`: always enable
        // * `disable`: always disable
        "Lua.runtime.builtin": {},
        // File encoding. The `ansi` option is only available under the `Windows` platform.
        // possible values: utf8, ansi
        "Lua.runtime.fileEncoding": "utf8",
        // Supports non-standard symbols. Make sure that your runtime environment supports these
        // symbols.
        "Lua.runtime.nonstandardSymbol": [],
        // `package.path`
        "Lua.runtime.path": [
            "?.lua", 
            "?/init.lua", 
            "?/?.lua"
        ],
        // Plugin path. Please read [wiki](https://github.com/sumneko/lua-language-
        // server/wiki/Plugin) to learn more.
        "Lua.runtime.plugin": "",
        // The custom global variables are regarded as some special built-in variables, and the
        // language server will provide special support
        // The following example shows that 'include' is treated as' require '.
        // ```json
        // "Lua.runtime.special" : {
        //     "include" : "require"
        // }
        // ```
        "Lua.runtime.special": {},
        // Allows Unicode characters in name.
        "Lua.runtime.unicodeName": false,
        // Lua runtime version.
        // possible values: Lua 5.1, Lua 5.2, Lua 5.3, Lua 5.4, LuaJIT
        "Lua.runtime.version": "Lua 5.4",
        // Enable signature help.
        "Lua.signatureHelp.enable": true,
        // Enable telemetry to send your editor information and error logs over the network. Read
        // our privacy policy [here](https://github.com/sumneko/lua-language-server/wiki/Privacy-
        // Policy).
        "Lua.telemetry.enable": false,
        // Show progress bar in status bar.
        "Lua.window.progressBar": true,
        // Ignored files and directories (Use `.gitignore` grammar).
        "Lua.workspace.ignoreDir": [
            ".vscode"
        ],
        // Ignore submodules.
        "Lua.workspace.ignoreSubmodules": true,
        // The directory path of the external function library.
        // The language service will additionally load the lua files in these directories, even if
        // they are not in the current workspace, for definition, completion and other features.
        "Lua.workspace.library": [],
        // Max preloaded files.
        "Lua.workspace.maxPreload": 1000,
        // Skip files larger than this value (KB) when preloading.
        "Lua.workspace.preloadFileSize": 100,
        // Ignore files list in `.gitignore` .
        "Lua.workspace.useGitIgnore": true,
        // Add private third-party library configuration file paths here, please refer to the built-
        // in [configuration file path](https://github.com/sumneko/lua-language-server/tree/master/meta/3rd)
        "Lua.workspace.userThirdParty": [],
    }
}
